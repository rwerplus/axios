{"map":"{\"version\":3,\"file\":\"util.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/tools/util.ts\"],\"names\":[],\"mappings\":\"AAAA,MAAM,UAAU,MAAM,CAAC,GAAQ;IAC7B,OAAO,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,eAAe,CAAA;AAC/C,CAAC;AAED,MAAM,UAAU,QAAQ,CAAC,GAAQ;IAC/B,OAAO,GAAG,KAAK,IAAI,IAAI,OAAO,GAAG,KAAK,QAAQ,CAAA;AAChD,CAAC;AAED;;;;;GAKG;AAEH,MAAM,UAAU,aAAa,CAAC,MAAW;IACvC,OAAO,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,KAAK,iBAAiB,CAAA;AAClE,CAAC;AAED,MAAM,UAAU,MAAM,CAAO,EAAK,EAAE,IAAO;IACzC,KAAK,IAAM,GAAG,IAAI,IAAI,EAAE;QACtB,CAAC;QAAC,EAAY,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAQ,CAAA;KACvC;IACD,OAAO,EAAW,CAAA;AACpB,CAAC;AAED,MAAM,CAAC,IAAM,SAAS,GAAG;IAAC,cAAc;SAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;QAAd,yBAAc;;IACtC,IAAM,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;IAClC,IAAI,CAAC,OAAO,CAAC,UAAA,GAAG;QACd,IAAI,GAAG,EAAE;YACP,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;gBAC1B,IAAM,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC,CAAA;gBACpB,IAAI,aAAa,CAAC,GAAG,CAAC,EAAE;oBACtB,IAAI,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE;wBAC9B,MAAM,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAA;qBAC1C;yBAAM;wBACL,MAAM,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,CAAA;qBAC7B;iBACF;qBAAM;oBACL,MAAM,CAAC,GAAG,CAAC,GAAG,GAAG,CAAA;iBAClB;YACH,CAAC,CAAC,CAAA;SACH;IACH,CAAC,CAAC,CAAA;IACF,OAAO,MAAM,CAAA;AACf,CAAC,CAAA;AAED,MAAM,UAAU,UAAU,CAAC,GAAO;IAChC,OAAO,OAAO,GAAG,KAAK,WAAW,IAAI,GAAG,YAAY,QAAQ,CAAA;AAC9D,CAAC\"}","code":"export function isDate(val) {\r\n    return toString.call(val) === '[object Date]';\r\n}\r\nexport function isObject(val) {\r\n    return val !== null && typeof val === 'object';\r\n}\r\n/**\r\n * Determine whether it is an ordinary object\r\n *\r\n * @param params object\r\n * @returns Boolean\r\n */\r\nexport function isPlainObject(params) {\r\n    return toString.call(params).toLowerCase() === '[object object]';\r\n}\r\nexport function extend(to, from) {\r\n    for (var key in from) {\r\n        ;\r\n        to[key] = from[key];\r\n    }\r\n    return to;\r\n}\r\nexport var deepMerge = function () {\r\n    var objS = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        objS[_i] = arguments[_i];\r\n    }\r\n    var result = Object.create(null);\r\n    objS.forEach(function (obj) {\r\n        if (obj) {\r\n            Object.keys(obj).forEach(function (key) {\r\n                var val = obj[key];\r\n                if (isPlainObject(val)) {\r\n                    if (isPlainObject(result[key])) {\r\n                        result[key] = deepMerge(result[key], val);\r\n                    }\r\n                    else {\r\n                        result[key] = deepMerge(val);\r\n                    }\r\n                }\r\n                else {\r\n                    result[key] = val;\r\n                }\r\n            });\r\n        }\r\n    });\r\n    return result;\r\n};\r\nexport function isFormData(val) {\r\n    return typeof val !== 'undefined' && val instanceof FormData;\r\n}\r\n//# sourceMappingURL=util.js.map","dts":{"name":"F:/code_gitee/f-voied-axios/dist/types/tools/util.d.ts","writeByteOrderMark":false,"text":"export declare function isDate(val: any): val is Date;\r\nexport declare function isObject(val: any): val is Object;\r\n/**\r\n * Determine whether it is an ordinary object\r\n *\r\n * @param params object\r\n * @returns Boolean\r\n */\r\nexport declare function isPlainObject(params: any): params is Object;\r\nexport declare function extend<T, K>(to: T, from: K): T & K;\r\nexport declare const deepMerge: (...objS: any[]) => any;\r\nexport declare function isFormData(val: any): val is FormData;\r\n"}}
