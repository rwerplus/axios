{"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../src/types/index.ts\"],\"names\":[],\"mappings\":\"\"}","code":"//# sourceMappingURL=index.js.map","dts":{"name":"F:/code_gitee/f-voied-axios/dist/types/types/index.d.ts","writeByteOrderMark":false,"text":"export declare type Method = 'get' | 'GET' | 'delete' | 'Delete' | 'head' | 'HEAD' | 'options' | 'OPTIONS' | 'post' | 'POST' | 'put' | 'PUT' | 'patch' | 'PATCH';\r\nexport interface AxiosRequestConfig {\r\n    url?: string;\r\n    method?: Method;\r\n    data?: any;\r\n    params?: any;\r\n    headers?: any;\r\n    responseType?: XMLHttpRequestResponseType;\r\n    timeout?: number;\r\n    transformRequest?: AxiosTransformer | AxiosTransformer[];\r\n    transformResponse?: AxiosTransformer | AxiosTransformer[];\r\n    cancelToken?: CancelToken;\r\n    withCredentials?: boolean;\r\n    xsrfCookieName?: string;\r\n    xsrfHeaderName?: string;\r\n    onDownloadProgress?(e: ProgressEvent): void;\r\n    onUploadProgress?(e: ProgressEvent): void;\r\n    [propName: string]: any;\r\n}\r\nexport interface AxiosResponse<T = any> {\r\n    data: T;\r\n    status: number;\r\n    statusText: string;\r\n    headers: any;\r\n    config: AxiosRequestConfig;\r\n    request: any;\r\n}\r\nexport interface AxiosPromise<T = any> extends Promise<AxiosResponse<T>> {\r\n}\r\nexport interface AxiosError extends Error {\r\n    config: AxiosRequestConfig;\r\n    code?: string | null;\r\n    request?: any;\r\n    response?: AxiosResponse;\r\n    isAxiosError?: boolean;\r\n}\r\nexport interface Axios {\r\n    defaults: AxiosRequestConfig;\r\n    interceptors: {\r\n        request: AxiosInterceptorManager<AxiosRequestConfig>;\r\n        response: AxiosInterceptorManager<AxiosResponse>;\r\n    };\r\n    request<T = any>(config: AxiosRequestConfig): AxiosPromise<T>;\r\n    get<T = any>(url: string, config?: AxiosRequestConfig): AxiosPromise<T>;\r\n    delete<T = any>(url: string, config?: AxiosRequestConfig): AxiosPromise<T>;\r\n    head<T = any>(url: string, config?: AxiosRequestConfig): AxiosPromise<T>;\r\n    options<T = any>(url: string, config?: AxiosRequestConfig): AxiosPromise<T>;\r\n    post<T = any>(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise<T>;\r\n    put<T = any>(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise<T>;\r\n    patch<T = any>(url: string, data?: any, config?: AxiosRequestConfig): AxiosPromise<T>;\r\n}\r\nexport interface AxiosInstance extends Axios {\r\n    <T = any>(config: AxiosRequestConfig): AxiosPromise<T>;\r\n    <T = any>(url: string, conf: AxiosRequestConfig): AxiosPromise<T>;\r\n}\r\nexport interface AxiosStatic extends AxiosInstance {\r\n    create(conf: AxiosRequestConfig): AxiosInstance;\r\n    CancelToken: CancelTokenStatic;\r\n    Cancel: CancelStatic;\r\n    isCancel: (value: any) => boolean;\r\n}\r\nexport interface ResolvedFn<T> {\r\n    (val: T): T | Promise<T>;\r\n}\r\nexport interface RejectedFn<T> {\r\n    (error: any): any;\r\n}\r\nexport interface AxiosInterceptorManager<T> {\r\n    use(resolved: ResolvedFn<T>, rejected?: RejectedFn<T>): number;\r\n    eject(id: number): void;\r\n}\r\nexport interface AxiosTransformer {\r\n    (data: any, headers?: any): any;\r\n}\r\nexport interface CancelToken {\r\n    promise: Promise<Cancel>;\r\n    reason?: Cancel;\r\n    throwIfRequested(): void;\r\n}\r\nexport interface Canceler {\r\n    (message?: string): void;\r\n}\r\nexport interface CancelExecutor {\r\n    (cancel: Canceler): void;\r\n}\r\nexport interface CancelTokenSource {\r\n    token: CancelToken;\r\n    cancel: Canceler;\r\n}\r\nexport interface CancelTokenStatic {\r\n    new (executor: CancelExecutor): CancelToken;\r\n    source(): CancelTokenSource;\r\n}\r\nexport interface Cancel {\r\n    message?: string;\r\n}\r\nexport interface CancelStatic {\r\n    new (message?: string): Cancel;\r\n}\r\n"}}
